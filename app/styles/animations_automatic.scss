/**
 * PAGES TRANSITIONS
 */
@mixin prefixer ($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      -webkit-#{$property}: $value;
    }
    @else if $prefix == moz {
      -moz-#{$property}: $value;
    }
    @else if $prefix == ms {
      -ms-#{$property}: $value;
    }
    @else if $prefix == o {
      -o-#{$property}: $value;
    }
    @else if $prefix == spec {
      #{$property}: $value;
    }
    @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}
@function transition-property-names($props, $vendor: false) {
	$new-props: ();

	@each $prop in $props {
		$new-props: append($new-props, transition-property-name($prop, $vendor), comma);
	}

	@return $new-props;
}
@function transition-property-name($prop, $vendor: false) {
	// put other properties that need to be prefixed here aswell
	@if $vendor and $prop == transform {
		@return unquote('-'+$vendor+'-'+$prop);
	}
	@else {
		@return $prop;
	}
}
@mixin transition-property ($properties...) {
   -webkit-transition-property: transition-property-names($properties, 'webkit');
      -moz-transition-property: transition-property-names($properties, 'moz');
           transition-property: transition-property-names($properties, false);
}
@mixin transition-duration ($times...) {
  @include prefixer(transition-duration, $times, webkit moz spec);
}
@mixin transition-timing-function ($motions...) {
// ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier()
  @include prefixer(transition-timing-function, $motions, webkit moz spec);
}
@mixin transform($property: none) {
  @include prefixer(transform, $property, webkit moz ms o spec);
}
@mixin translateXTime($translate, $time) {
	@include transform(translateX($translate));
	@include transition-property(transform);
	@include transition-duration($time);
	@include transition-timing-function(linear);
//	@include transition-delay(0.5s);
}


@mixin translateX($param) {
  -webkit-transform: translateX($param);
          transform: translateX($param);
}
@mixin transition-transform($seconds) {
	/* For Safari 3.1 to 6.0 */
  -webkit-transition: -webkit-transform $seconds linear; //delay
	/* Standard syntax */
          transition: transform $seconds linear; //delay
}
@mixin transition-width($seconds) {
  -webkit-transition: width $seconds linear; //delay
          transition: width $seconds linear; //delay
}
@mixin transition-all($seconds) {
  -webkit-transition: all $seconds linear; //delay
          transition: all $seconds linear; //delay
}

@mixin translate-transition-start($seconds, $col, $start ) {
	@if unitless($seconds) {
		$seconds: 1s * $seconds;
	}
	@include transition-transform( $seconds );
	@if unitless($col) {
		$col: 1% * $col;
	}
	@if unitless($start) {
		$start: 1% * $start;
	}
	@include translateX( (12% - $start)/$col * 100% );
}
@mixin translate-transition($seconds, $col ) {
	@if unitless($seconds) {
		$seconds: 1s * $seconds;
	}
	@include transition-transform( $seconds );
	@if unitless($col) {
		$col: 1% * $col;
	}
	@include translateX( 12%/$col * 100% );
}
@mixin calc-grid-column-len($index, $class) {
	@debug $grid-columns;
	@debug $index;
	@debug ($grid-columns / $index);
	$translate: percentage(($grid-columns / $index));	//$translate: 12% / $col * 100%;
	@debug $translate;
	$time: 5s * ( $index / $grid-columns);	//1s -> 12 col
	.col-#{$class}-#{$index}.moveRight {
//      width: percentage(($index / $grid-columns));
//		@include translateX( $translate );
//		@include transition-transform( $time );
		@include translateXTime($translate, $time);
    }
	.col-#{$class}-#{$index}.moveLeft {
//      width: percentage(($index / $grid-columns));
//		@include translateX( -$translate );
//		@include transition-transform( $time );
		@include translateXTime( -$translate, $time);
    }
}
/**
 * Test
 */
@mixin loop-grid-columns-len($columns) {
  @for $i from 1 through $columns {
//    @include calc-grid-column($i, $class, $type);
//	  @debug $i;
//      @include move($i);
    @include calc-grid-column-len($i, xs);
  }
}
@include loop-grid-columns-len($grid-columns);
